Compiled with problems:
ERROR in src/AboutSection/AboutSection.tsx:302:21
TS2339: Property 'map' does not exist on type '{}'.
    300 |
    301 |         <div style={styles.benefitsGrid}>
  > 302 |           {benefits.map((benefit, index) => (
        |                     ^^^
    303 |             <BenefitCard key={index} {...benefit} />
    304 |           ))}
    305 |         </div>
ERROR in src/AboutSection/AboutSection.tsx:302:26
TS7006: Parameter 'benefit' implicitly has an 'any' type.
    300 |
    301 |         <div style={styles.benefitsGrid}>
  > 302 |           {benefits.map((benefit, index) => (
        |                          ^^^^^^^
    303 |             <BenefitCard key={index} {...benefit} />
    304 |           ))}
    305 |         </div>
ERROR in src/AboutSection/AboutSection.tsx:302:35
TS7006: Parameter 'index' implicitly has an 'any' type.
    300 |
    301 |         <div style={styles.benefitsGrid}>
  > 302 |           {benefits.map((benefit, index) => (
        |                                   ^^^^^
    303 |             <BenefitCard key={index} {...benefit} />
    304 |           ))}
    305 |         </div>
ERROR in src/AboutSection/AboutSection.tsx:310:27
TS2339: Property 'map' does not exist on type '{}'.
    308 |           <h3 style={styles.processTitle}>Our Process</h3>
    309 |           <div style={styles.processSteps}>
  > 310 |             {processSteps.map((step, index) => (
        |                           ^^^
    311 |               <ProcessStep key={index} {...step} />
    312 |             ))}
    313 |           </div>
ERROR in src/AboutSection/AboutSection.tsx:310:32
TS7006: Parameter 'step' implicitly has an 'any' type.
    308 |           <h3 style={styles.processTitle}>Our Process</h3>
    309 |           <div style={styles.processSteps}>
  > 310 |             {processSteps.map((step, index) => (
        |                                ^^^^
    311 |               <ProcessStep key={index} {...step} />
    312 |             ))}
    313 |           </div>
ERROR in src/AboutSection/AboutSection.tsx:310:38
TS7006: Parameter 'index' implicitly has an 'any' type.
    308 |           <h3 style={styles.processTitle}>Our Process</h3>
    309 |           <div style={styles.processSteps}>
  > 310 |             {processSteps.map((step, index) => (
        |                                      ^^^^^
    311 |               <ProcessStep key={index} {...step} />
    312 |             ))}
    313 |           </div>
ERROR in src/AboutSection/InteractiveModel.tsx:171:19
TS2339: Property 'map' does not exist on type '{}'.
    169 |
    170 |       <div style={styles.controlsContainer}>
  > 171 |         {controls.map((control, index) => (
        |                   ^^^
    172 |           <div key={index} style={styles.controlItem}>
    173 |             <div style={styles.controlIcon}>{control.icon}</div>
    174 |             <span style={styles.controlText}>{control.label}</span>
ERROR in src/AboutSection/InteractiveModel.tsx:171:24
TS7006: Parameter 'control' implicitly has an 'any' type.
    169 |
    170 |       <div style={styles.controlsContainer}>
  > 171 |         {controls.map((control, index) => (
        |                        ^^^^^^^
    172 |           <div key={index} style={styles.controlItem}>
    173 |             <div style={styles.controlIcon}>{control.icon}</div>
    174 |             <span style={styles.controlText}>{control.label}</span>
ERROR in src/AboutSection/InteractiveModel.tsx:171:33
TS7006: Parameter 'index' implicitly has an 'any' type.
    169 |
    170 |       <div style={styles.controlsContainer}>
  > 171 |         {controls.map((control, index) => (
        |                                 ^^^^^
    172 |           <div key={index} style={styles.controlItem}>
    173 |             <div style={styles.controlIcon}>{control.icon}</div>
    174 |             <span style={styles.controlText}>{control.label}</span>
ERROR in src/AboutSection/TechSpecs.tsx:89:14
TS2339: Property 'map' does not exist on type '{}'.
    87 |     <h4 style={blockStyles.blockTitle}>{title}</h4>
    88 |     <ul style={blockStyles.list}>
  > 89 |       {items.map((item, index) => (
       |              ^^^
    90 |         <li key={index} style={blockStyles.listItem}>
    91 |           <span style={blockStyles.bullet} />
    92 |           {item}
ERROR in src/AboutSection/TechSpecs.tsx:89:19
TS7006: Parameter 'item' implicitly has an 'any' type.
    87 |     <h4 style={blockStyles.blockTitle}>{title}</h4>
    88 |     <ul style={blockStyles.list}>
  > 89 |       {items.map((item, index) => (
       |                   ^^^^
    90 |         <li key={index} style={blockStyles.listItem}>
    91 |           <span style={blockStyles.bullet} />
    92 |           {item}
ERROR in src/AboutSection/TechSpecs.tsx:89:25
TS7006: Parameter 'index' implicitly has an 'any' type.
    87 |     <h4 style={blockStyles.blockTitle}>{title}</h4>
    88 |     <ul style={blockStyles.list}>
  > 89 |       {items.map((item, index) => (
       |                         ^^^^^
    90 |         <li key={index} style={blockStyles.listItem}>
    91 |           <span style={blockStyles.bullet} />
    92 |           {item}
ERROR in src/AboutSection/TechSpecs.tsx:140:25
TS2339: Property 'map' does not exist on type '{}'.
    138 |       <h3 style={styles.title}>Technical Specifications</h3>
    139 |       <div style={styles.grid}>
  > 140 |         {specifications.map((spec, index) => (
        |                         ^^^
    141 |           <SpecificationBlock key={index} {...spec} />
    142 |         ))}
    143 |       </div>
ERROR in src/AboutSection/TechSpecs.tsx:140:30
TS7006: Parameter 'spec' implicitly has an 'any' type.
    138 |       <h3 style={styles.title}>Technical Specifications</h3>
    139 |       <div style={styles.grid}>
  > 140 |         {specifications.map((spec, index) => (
        |                              ^^^^
    141 |           <SpecificationBlock key={index} {...spec} />
    142 |         ))}
    143 |       </div>
ERROR in src/AboutSection/TechSpecs.tsx:140:36
TS7006: Parameter 'index' implicitly has an 'any' type.
    138 |       <h3 style={styles.title}>Technical Specifications</h3>
    139 |       <div style={styles.grid}>
  > 140 |         {specifications.map((spec, index) => (
        |                                    ^^^^^
    141 |           <SpecificationBlock key={index} {...spec} />
    142 |         ))}
    143 |       </div>
ERROR in src/AppointmentsSection.tsx:335:11
TS2304: Cannot find name 'Date'.
    333 |
    334 |     const newAppointment: Appointment = {
  > 335 |       id: Date.now().toString(),
        |           ^^^^
    336 |       date: selectedDate,
    337 |       time: selectedTime,
    338 |       patientName: currentUserName,
ERROR in src/AppointmentsSection.tsx:361:20
TS2339: Property 'map' does not exist on type '{}'.
    359 |   ) => {
    360 |     setAppointments(
  > 361 |       appointments.map((apt) =>
        |                    ^^^
    362 |         apt.id === appointmentId ? { ...apt, status: newStatus } : apt
    363 |       )
    364 |     );
ERROR in src/AppointmentsSection.tsx:361:25
TS7006: Parameter 'apt' implicitly has an 'any' type.
    359 |   ) => {
    360 |     setAppointments(
  > 361 |       appointments.map((apt) =>
        |                         ^^^
    362 |         apt.id === appointmentId ? { ...apt, status: newStatus } : apt
    363 |       )
    364 |     );
ERROR in src/AppointmentsSection.tsx:397:12
TS2339: Property 'filter' does not exist on type '{}'.
    395 |       <div style={styles.appointmentsList}>
    396 |         {appointments
  > 397 |           .filter((apt) =>
        |            ^^^^^^
    398 |             userType === "patient"
    399 |               ? apt.patientName === currentUserName
    400 |               : apt.doctorName === currentUserName
ERROR in src/AppointmentsSection.tsx:397:20
TS7006: Parameter 'apt' implicitly has an 'any' type.
    395 |       <div style={styles.appointmentsList}>
    396 |         {appointments
  > 397 |           .filter((apt) =>
        |                    ^^^
    398 |             userType === "patient"
    399 |               ? apt.patientName === currentUserName
    400 |               : apt.doctorName === currentUserName
ERROR in src/AppointmentsSection.tsx:402:17
TS7006: Parameter 'appointment' implicitly has an 'any' type.
    400 |               : apt.doctorName === currentUserName
    401 |           )
  > 402 |           .map((appointment) => (
        |                 ^^^^^^^^^^^
    403 |             <div key={appointment.id} style={styles.appointmentCard}>
    404 |               <div style={styles.appointmentInfo}>
    405 |                 <div style={styles.iconContainer}>
ERROR in src/AppointmentsSection.tsx:417:28
TS2304: Cannot find name 'Date'.
    415 |                     <div style={styles.appointmentMeta}>
    416 |                       <Clock size={16} />
  > 417 |                       {new Date(appointment.date).toLocaleDateString()} at{" "}
        |                            ^^^^
    418 |                       {appointment.time}
    419 |                     </div>
    420 |                     {appointment.notes && (
ERROR in src/AppointmentsSection.tsx:460:23
TS2339: Property 'length' does not exist on type '{}'.
    458 |           ))}
    459 |
  > 460 |         {appointments.length === 0 && (
        |                       ^^^^^^
    461 |           <div style={styles.emptyState}>
    462 |             <Calendar size={48} style={{ margin: "0 auto 1rem" }} />
    463 |             <p>No appointments scheduled</p>
ERROR in src/AppointmentsSection.tsx:490:28
TS2339: Property 'map' does not exist on type '{}'.
    488 |                 >
    489 |                   <option value="">Choose a doctor</option>
  > 490 |                   {doctors.map((doctor) => (
        |                            ^^^
    491 |                     <option key={doctor.id} value={doctor.name}>
    492 |                       {doctor.name}
    493 |                     </option>
ERROR in src/AppointmentsSection.tsx:490:33
TS7006: Parameter 'doctor' implicitly has an 'any' type.
    488 |                 >
    489 |                   <option value="">Choose a doctor</option>
  > 490 |                   {doctors.map((doctor) => (
        |                                 ^^^^^^
    491 |                     <option key={doctor.id} value={doctor.name}>
    492 |                       {doctor.name}
    493 |                     </option>
ERROR in src/AppointmentsSection.tsx:505:28
TS2304: Cannot find name 'Date'.
    503 |                   onChange={(e) => setSelectedDate(e.target.value)}
    504 |                   style={styles.input}
  > 505 |                   min={new Date().toISOString().split("T")[0]}
        |                            ^^^^
    506 |                 />
    507 |               </div>
    508 |
ERROR in src/components/ErrorDisplay.tsx:6:10
TS2304: Cannot find name 'Error'.
    4 |
    5 | interface ErrorDisplayProps {
  > 6 |   error: Error;
      |          ^^^^^
    7 |   onRetry?: () => void;
    8 | }
    9 |
ERROR in src/config.ts:2:24
TS2591: Cannot find name 'process'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node` and then add 'node' to the types field in your tsconfig.
    1 | // src/config.ts
  > 2 | export const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';
      |                        ^^^^^^^
    3 |
ERROR in src/contexts/AuthContext.tsx:15:68
TS2583: Cannot find name 'Promise'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
    13 | interface AuthContextType {
    14 |   user: User | null;
  > 15 |   login: (email: string, password: string, rememberMe: boolean) => Promise<User>;
       |                                                                    ^^^^^^^
    16 |   signup: (userData: {
    17 |     email: string;
    18 |     password: string;
ERROR in src/contexts/AuthContext.tsx:21:9
TS2583: Cannot find name 'Promise'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
    19 |     name: string;
    20 |     role: "doctor" | "patient";
  > 21 |   }) => Promise<User>;
       |         ^^^^^^^
    22 |   logout: () => void;
    23 |   isAuthenticated: boolean;
    24 | }
ERROR in src/contexts/AuthContext.tsx:40:25
TS2697: An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.
    38 |   }, []);
    39 |
  > 40 |   const fetchUserData = async (token: string) => {
       |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    41 |     try {
    42 |       const response = await axios.get(`${API_URL}/api/auth/profile`, {
    43 |         headers: {
ERROR in src/contexts/AuthContext.tsx:59:6
TS2583: Cannot find name 'Promise'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
    57 |     password: string,
    58 |     rememberMe: boolean
  > 59 |   ): Promise<User> => {
       |      ^^^^^^^
    60 |     try {
    61 |       const response = await axios.post(`${API_URL}/api/auth/login`, {
    62 |         email,
ERROR in src/contexts/AuthContext.tsx:77:17
TS2304: Cannot find name 'Error'.
    75 |       return user;
    76 |     } catch (error) {
  > 77 |       throw new Error('Invalid credentials');
       |                 ^^^^^
    78 |     }
    79 |   };
    80 |
ERROR in src/contexts/AuthContext.tsx:86:7
TS2583: Cannot find name 'Promise'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
    84 |     name: string;
    85 |     role: "doctor" | "patient";
  > 86 |   }): Promise<User> => {
       |       ^^^^^^^
    87 |     try {
    88 |       const response = await axios.post(`${API_URL}/api/auth/signup`, userData);
    89 |       const { user, token } = response.data;
ERROR in src/contexts/AuthContext.tsx:95:17
TS2304: Cannot find name 'Error'.
    93 |       return user;
    94 |     } catch (error) {
  > 95 |       throw new Error('Registration failed');
       |                 ^^^^^
    96 |     }
    97 |   };
    98 |
ERROR in src/contexts/AuthContext.tsx:123:15
TS2304: Cannot find name 'Error'.
    121 |   const context = useContext(AuthContext);
    122 |   if (context === undefined) {
  > 123 |     throw new Error("useAuth must be used within an AuthProvider");
        |               ^^^^^
    124 |   }
    125 |   return context;
    126 | };
ERROR in src/contexts/AuthModal.tsx:63:13
TS2339: Property 'charAt' does not exist on type '"doctor" | "patient"'.
  Property 'charAt' does not exist on type '"doctor"'.
    61 |       fontWeight: isSelected ? "500" : "normal"
    62 |     }}>
  > 63 |       {role.charAt(0).toUpperCase() + role.slice(1)}
       |             ^^^^^^
    64 |     </span>
    65 |   </div>
    66 | );
ERROR in src/contexts/AuthModal.tsx:63:44
TS2339: Property 'slice' does not exist on type '"doctor" | "patient"'.
  Property 'slice' does not exist on type '"doctor"'.
    61 |       fontWeight: isSelected ? "500" : "normal"
    62 |     }}>
  > 63 |       {role.charAt(0).toUpperCase() + role.slice(1)}
       |                                            ^^^^^
    64 |     </span>
    65 |   </div>
    66 | );
ERROR in src/contexts/AuthModal.tsx:86:24
TS2697: An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.
    84 |   const navigate = useNavigate();
    85 |
  > 86 |   const handleSubmit = async (e: React.FormEvent) => {
       |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    87 |     e.preventDefault();
    88 |     setError("");
    89 |     setSuccessMessage("");
ERROR in src/contexts/AuthModal.tsx:94:21
TS2304: Cannot find name 'Error'.
    92 |       if (isSignup) {
    93 |         if (!formData.name || !formData.role) {
  > 94 |           throw new Error("Please fill in all required fields");
       |                     ^^^^^
    95 |         }
    96 |         await signup({
    97 |           email: formData.email,
ERROR in src/contexts/AuthModal.tsx:117:31
TS2304: Cannot find name 'Error'.
    115 |       }
    116 |     } catch (err) {
  > 117 |       setError(err instanceof Error ? err.message : "An error occurred");
        |                               ^^^^^
    118 |     }
    119 |   };
    120 |
ERROR in src/contexts/AuthModal.tsx:117:39
TS18046: 'err' is of type 'unknown'.
    115 |       }
    116 |     } catch (err) {
  > 117 |       setError(err instanceof Error ? err.message : "An error occurred");
        |                                       ^^^
    118 |     }
    119 |   };
    120 |
ERROR in src/Dashboard.tsx:387:38
TS2339: Property 'map' does not exist on type '{}'.
    385 |             <div style={styles.activityFeed}>
    386 |               <h3 style={styles.activityTitle}>Recent Activity</h3>
  > 387 |               {data?.recentActivity?.map((activity: ActivityItem, index: number) => (
        |                                      ^^^
    388 |                 <div key={index} style={styles.activityItem}>
    389 |                   {activity.icon}
    390 |                   <div style={styles.activityContent}>
ERROR in src/Dashboard.tsx:442:22
TS2339: Property 'map' does not exist on type '{}'.
    440 |         {/* Navigation */}
    441 |         <nav style={styles.navigation}>
  > 442 |           {menuItems.map((item) => {
        |                      ^^^
    443 |             const Icon = item.icon;
    444 |             const isActive = activeSection === item.id;
    445 |
ERROR in src/Dashboard.tsx:442:27
TS7006: Parameter 'item' implicitly has an 'any' type.
    440 |         {/* Navigation */}
    441 |         <nav style={styles.navigation}>
  > 442 |           {menuItems.map((item) => {
        |                           ^^^^
    443 |             const Icon = item.icon;
    444 |             const isActive = activeSection === item.id;
    445 |
ERROR in src/DicomUploadsSection.tsx:302:23
TS2697: An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.
    300 |   }, [activeTab]);
    301 |
  > 302 |   const fetchOrders = async () => {
        |                       ^^^^^^^^^^^^^
    303 |     try {
    304 |       const status = activeTab === "current" ? "PENDING,IN_PROGRESS" : "COMPLETED";
    305 |       const response = await axios.get(`${API_URL}/api/dicom-orders?status=${status}`, {
ERROR in src/DicomUploadsSection.tsx:328:24
TS2697: An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.
    326 |   };
    327 |
  > 328 |   const handleUpload = async () => {
        |                        ^^^^^^^^^^^^^
    329 |     if (!selectedFiles || !patientId) return;
    330 |
    331 |     const formData = new FormData();
ERROR in src/DicomUploadsSection.tsx:332:5
TS2304: Cannot find name 'Array'.
    330 |
    331 |     const formData = new FormData();
  > 332 |     Array.from(selectedFiles).forEach((file) => {
        |     ^^^^^
    333 |       formData.append('files', file);
    334 |     });
    335 |     formData.append('patientId', patientId);
ERROR in src/DicomUploadsSection.tsx:332:40
TS7006: Parameter 'file' implicitly has an 'any' type.
    330 |
    331 |     const formData = new FormData();
  > 332 |     Array.from(selectedFiles).forEach((file) => {
        |                                        ^^^^
    333 |       formData.append('files', file);
    334 |     });
    335 |     formData.append('patientId', patientId);
ERROR in src/DicomUploadsSection.tsx:358:48
TS2339: Property 'map' does not exist on type 'readonly ["current", "completed"]'.
    356 |       <div style={styles.header}>
    357 |         <div style={styles.tabs}>
  > 358 |           {(["current", "completed"] as const).map((tab) => (
        |                                                ^^^
    359 |             <button
    360 |               key={tab}
    361 |               onClick={() => setActiveTab(tab)}
ERROR in src/DicomUploadsSection.tsx:358:53
TS7006: Parameter 'tab' implicitly has an 'any' type.
    356 |       <div style={styles.header}>
    357 |         <div style={styles.tabs}>
  > 358 |           {(["current", "completed"] as const).map((tab) => (
        |                                                     ^^^
    359 |             <button
    360 |               key={tab}
    361 |               onClick={() => setActiveTab(tab)}
ERROR in src/DicomUploadsSection.tsx:425:32
TS2304: Cannot find name 'Array'.
    423 |                 </p>
    424 |                 <p style={styles.fileSize}>
  > 425 |                   Total size: {Array.from(selectedFiles).reduce((acc, file) => acc + file.size, 0) / 1024 / 1024} MB
        |                                ^^^^^
    426 |                 </p>
    427 |               </div>
    428 |             )}
ERROR in src/DicomUploadsSection.tsx:425:66
TS7006: Parameter 'acc' implicitly has an 'any' type.
    423 |                 </p>
    424 |                 <p style={styles.fileSize}>
  > 425 |                   Total size: {Array.from(selectedFiles).reduce((acc, file) => acc + file.size, 0) / 1024 / 1024} MB
        |                                                                  ^^^
    426 |                 </p>
    427 |               </div>
    428 |             )}
ERROR in src/DicomUploadsSection.tsx:425:71
TS7006: Parameter 'file' implicitly has an 'any' type.
    423 |                 </p>
    424 |                 <p style={styles.fileSize}>
  > 425 |                   Total size: {Array.from(selectedFiles).reduce((acc, file) => acc + file.size, 0) / 1024 / 1024} MB
        |                                                                       ^^^^
    426 |                 </p>
    427 |               </div>
    428 |             )}
ERROR in src/DicomUploadsSection.tsx:457:110
TS2339: Property 'map' does not exist on type '{}'.
    455 |           <thead>
    456 |             <tr style={styles.tableHeader}>
  > 457 |               {["Order ID", "Collaborating Doctors", "Patient ID", "Status", "Creation Date", "Last Update"].map(
        |                                                                                                              ^^^
    458 |                 (header) => (
    459 |                   <th key={header} style={styles.tableHeaderCell}>
    460 |                     {header}
ERROR in src/DicomUploadsSection.tsx:458:18
TS7006: Parameter 'header' implicitly has an 'any' type.
    456 |             <tr style={styles.tableHeader}>
    457 |               {["Order ID", "Collaborating Doctors", "Patient ID", "Status", "Creation Date", "Last Update"].map(
  > 458 |                 (header) => (
        |                  ^^^^^^
    459 |                   <th key={header} style={styles.tableHeaderCell}>
    460 |                     {header}
    461 |                   </th>
ERROR in src/DicomUploadsSection.tsx:467:21
TS2339: Property 'map' does not exist on type '{}'.
    465 |           </thead>
    466 |           <tbody>
  > 467 |             {orders.map((order) => (
        |                     ^^^
    468 |               <tr key={order.orderId} style={styles.tableRow}>
    469 |                 <td style={{ ...styles.tableCell, color: "white" }}>
    470 |                   {order.orderId}
ERROR in src/DicomUploadsSection.tsx:467:26
TS7006: Parameter 'order' implicitly has an 'any' type.
    465 |           </thead>
    466 |           <tbody>
  > 467 |             {orders.map((order) => (
        |                          ^^^^^
    468 |               <tr key={order.orderId} style={styles.tableRow}>
    469 |                 <td style={{ ...styles.tableCell, color: "white" }}>
    470 |                   {order.orderId}
ERROR in src/DicomUploadsSection.tsx:477:24
TS2304: Cannot find name 'getStatusText'.
    475 |                   <div style={styles.statusContainer}>
    476 |                     <span style={styles.statusText}>
  > 477 |                       {getStatusText(order.status.state)}
        |                        ^^^^^^^^^^^^^
    478 |                     </span>
    479 |                     <div style={styles.progressBar}>
    480 |                       <div
ERROR in src/DicomUploadsSection.tsx:484:44
TS2304: Cannot find name 'getStatusColor'.
    482 |                           ...styles.progressBarFill,
    483 |                           width: `${order.status.progress}%`,
  > 484 |                           backgroundColor: getStatusColor(order.status.state),
        |                                            ^^^^^^^^^^^^^^
    485 |                         }}
    486 |                       />
    487 |                     </div>
ERROR in src/DicomUploadsSection.tsx:500:25
TS2304: Cannot find name 'entriesPerPage'.
    498 |       <div style={styles.pagination}>
    499 |         <div style={styles.paginationInfo}>
  > 500 |           Showing 1 to {entriesPerPage} of {orders.length} entries
        |                         ^^^^^^^^^^^^^^
    501 |         </div>
    502 |         <div style={styles.paginationControls}>
    503 |           <button
ERROR in src/DicomUploadsSection.tsx:500:52
TS2339: Property 'length' does not exist on type '{}'.
    498 |       <div style={styles.pagination}>
    499 |         <div style={styles.paginationInfo}>
  > 500 |           Showing 1 to {entriesPerPage} of {orders.length} entries
        |                                                    ^^^^^^
    501 |         </div>
    502 |         <div style={styles.paginationControls}>
    503 |           <button
ERROR in src/DicomUploadsSection.tsx:504:28
TS2304: Cannot find name 'setCurrentPage'.
    502 |         <div style={styles.paginationControls}>
    503 |           <button
  > 504 |             onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
        |                            ^^^^^^^^^^^^^^
    505 |             style={{
    506 |               ...styles.paginationButton,
    507 |               ...(currentPage === 1 ? styles.paginationButtonDisabled : {}),
ERROR in src/DicomUploadsSection.tsx:504:43
TS2304: Cannot find name 'Math'.
    502 |         <div style={styles.paginationControls}>
    503 |           <button
  > 504 |             onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
        |                                           ^^^^
    505 |             style={{
    506 |               ...styles.paginationButton,
    507 |               ...(currentPage === 1 ? styles.paginationButtonDisabled : {}),
ERROR in src/DicomUploadsSection.tsx:504:55
TS2304: Cannot find name 'currentPage'.
    502 |         <div style={styles.paginationControls}>
    503 |           <button
  > 504 |             onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
        |                                                       ^^^^^^^^^^^
    505 |             style={{
    506 |               ...styles.paginationButton,
    507 |               ...(currentPage === 1 ? styles.paginationButtonDisabled : {}),
ERROR in src/DicomUploadsSection.tsx:507:19
TS2304: Cannot find name 'currentPage'.
    505 |             style={{
    506 |               ...styles.paginationButton,
  > 507 |               ...(currentPage === 1 ? styles.paginationButtonDisabled : {}),
        |                   ^^^^^^^^^^^
    508 |             }}
    509 |             disabled={currentPage === 1}
    510 |           >
ERROR in src/DicomUploadsSection.tsx:509:23
TS2304: Cannot find name 'currentPage'.
    507 |               ...(currentPage === 1 ? styles.paginationButtonDisabled : {}),
    508 |             }}
  > 509 |             disabled={currentPage === 1}
        |                       ^^^^^^^^^^^
    510 |           >
    511 |             <ChevronLeft size={16} />
    512 |           </button>
ERROR in src/DicomUploadsSection.tsx:517:28
TS2304: Cannot find name 'setCurrentPage'.
    515 |           </div>
    516 |           <button
  > 517 |             onClick={() => setCurrentPage(currentPage + 1)}
        |                            ^^^^^^^^^^^^^^
    518 |             style={{
    519 |               ...styles.paginationButton,
    520 |               ...(currentPage * entriesPerPage >= orders.length
ERROR in src/DicomUploadsSection.tsx:517:43
TS2304: Cannot find name 'currentPage'.
    515 |           </div>
    516 |           <button
  > 517 |             onClick={() => setCurrentPage(currentPage + 1)}
        |                                           ^^^^^^^^^^^
    518 |             style={{
    519 |               ...styles.paginationButton,
    520 |               ...(currentPage * entriesPerPage >= orders.length
ERROR in src/DicomUploadsSection.tsx:520:19
TS2304: Cannot find name 'currentPage'.
    518 |             style={{
    519 |               ...styles.paginationButton,
  > 520 |               ...(currentPage * entriesPerPage >= orders.length
        |                   ^^^^^^^^^^^
    521 |                 ? styles.paginationButtonDisabled
    522 |                 : {}),
    523 |             }}
ERROR in src/DicomUploadsSection.tsx:520:33
TS2304: Cannot find name 'entriesPerPage'.
    518 |             style={{
    519 |               ...styles.paginationButton,
  > 520 |               ...(currentPage * entriesPerPage >= orders.length
        |                                 ^^^^^^^^^^^^^^
    521 |                 ? styles.paginationButtonDisabled
    522 |                 : {}),
    523 |             }}
ERROR in src/DicomUploadsSection.tsx:520:58
TS2339: Property 'length' does not exist on type '{}'.
    518 |             style={{
    519 |               ...styles.paginationButton,
  > 520 |               ...(currentPage * entriesPerPage >= orders.length
        |                                                          ^^^^^^
    521 |                 ? styles.paginationButtonDisabled
    522 |                 : {}),
    523 |             }}
ERROR in src/DicomUploadsSection.tsx:524:23
TS2304: Cannot find name 'currentPage'.
    522 |                 : {}),
    523 |             }}
  > 524 |             disabled={currentPage * entriesPerPage >= orders.length}
        |                       ^^^^^^^^^^^
    525 |           >
    526 |             <ChevronRight size={16} />
    527 |           </button>
ERROR in src/DicomUploadsSection.tsx:524:37
TS2304: Cannot find name 'entriesPerPage'.
    522 |                 : {}),
    523 |             }}
  > 524 |             disabled={currentPage * entriesPerPage >= orders.length}
        |                                     ^^^^^^^^^^^^^^
    525 |           >
    526 |             <ChevronRight size={16} />
    527 |           </button>
ERROR in src/DicomUploadsSection.tsx:524:62
TS2339: Property 'length' does not exist on type '{}'.
    522 |                 : {}),
    523 |             }}
  > 524 |             disabled={currentPage * entriesPerPage >= orders.length}
        |                                                              ^^^^^^
    525 |           >
    526 |             <ChevronRight size={16} />
    527 |           </button>
ERROR in src/hooks/useDashboardData.ts:11:38
TS2304: Cannot find name 'Error'.
     9 |   const [data, setData] = useState<DashboardData | null>(null);
    10 |   const [loading, setLoading] = useState(true);
  > 11 |   const [error, setError] = useState<Error | null>(null);
       |                                      ^^^^^
    12 |   const { user } = useAuth();
    13 |
    14 |   const fetchData = async () => {
ERROR in src/hooks/useDashboardData.ts:14:21
TS2697: An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.
    12 |   const { user } = useAuth();
    13 |
  > 14 |   const fetchData = async () => {
       |                     ^^^^^^^^^^^^^
    15 |     try {
    16 |       setLoading(true);
    17 |       setError(null);
ERROR in src/hooks/useDashboardData.ts:22:19
TS2304: Cannot find name 'Error'.
    20 |       
    21 |       if (!token || !user?.id) {
  > 22 |         throw new Error('Authentication required');
       |                   ^^^^^
    23 |       }
    24 |
    25 |       console.log('Fetching dashboard data');
ERROR in src/hooks/useDashboardData.ts:37:19
TS2304: Cannot find name 'Error'.
    35 |
    36 |       if (!response.data) {
  > 37 |         throw new Error('No data received from server');
       |                   ^^^^^
    38 |       }
    39 |
    40 |       setData(response.data);
ERROR in src/hooks/useDashboardData.ts:44:88
TS2339: Property 'message' does not exist on type 'AxiosError<any, any>'.
    42 |       console.error('Dashboard data error:', err);
    43 |       if (axios.isAxiosError(err)) {
  > 44 |         const errMsg = err.response?.data?.error || err.response?.data?.details || err.message;
       |                                                                                        ^^^^^^^
    45 |         setError(new Error(errMsg));
    46 |         
    47 |         if (err.response?.status === 401) {
ERROR in src/hooks/useDashboardData.ts:45:22
TS2304: Cannot find name 'Error'.
    43 |       if (axios.isAxiosError(err)) {
    44 |         const errMsg = err.response?.data?.error || err.response?.data?.details || err.message;
  > 45 |         setError(new Error(errMsg));
       |                      ^^^^^
    46 |         
    47 |         if (err.response?.status === 401) {
    48 |           localStorage.removeItem('token');
ERROR in src/hooks/useDashboardData.ts:53:33
TS2304: Cannot find name 'Error'.
    51 |         }
    52 |       } else {
  > 53 |         setError(err instanceof Error ? err : new Error('Failed to fetch dashboard data'));
       |                                 ^^^^^
    54 |       }
    55 |     } finally {
    56 |       setLoading(false);
ERROR in src/hooks/useDashboardData.ts:53:51
TS2304: Cannot find name 'Error'.
    51 |         }
    52 |       } else {
  > 53 |         setError(err instanceof Error ? err : new Error('Failed to fetch dashboard data'));
       |                                                   ^^^^^
    54 |       }
    55 |     } finally {
    56 |       setLoading(false);
ERROR in src/LandingPage.tsx:89:7
TS2304: Cannot find name 'Math'.
    87 |   const getGradientStyle = () => {
    88 |     const angle =
  > 89 |       Math.atan2(mousePosition.y - 0.5, mousePosition.x - 0.5) *
       |       ^^^^
    90 |       (180 / Math.PI);
    91 |     const intensity = isHovered ? 0.15 : 0.1;
    92 |     const glowIntensity = isHovered ? 0.3 : 0.2;
ERROR in src/LandingPage.tsx:90:14
TS2304: Cannot find name 'Math'.
    88 |     const angle =
    89 |       Math.atan2(mousePosition.y - 0.5, mousePosition.x - 0.5) *
  > 90 |       (180 / Math.PI);
       |              ^^^^
    91 |     const intensity = isHovered ? 0.15 : 0.1;
    92 |     const glowIntensity = isHovered ? 0.3 : 0.2;
    93 |
ERROR in src/services/api.ts:7:3
TS2345: Argument of type '{ baseURL: any; }' is not assignable to parameter of type 'CreateAxiosDefaults<any>'.
  Object literal may only specify known properties, and 'baseURL' does not exist in type 'CreateAxiosDefaults<any>'.
     5 |
     6 | const api = axios.create({
  >  7 |   baseURL: API_URL,
       |   ^^^^^^^^^^^^^^^^
     8 | });
     9 |
    10 | api.interceptors.request.use((config) => {
ERROR in src/services/api.ts:22:11
TS2339: Property 'forEach' does not exist on type '{}'.
    20 |   uploadFiles: async (files: File[], patientId: string) => {
    21 |     const formData = new FormData();
  > 22 |     files.forEach(file => formData.append('files', file));
       |           ^^^^^^^
    23 |     formData.append('patientId', patientId);
    24 |     const { data } = await api.post('/dicom/upload', formData);
    25 |     return data;
ERROR in src/services/api.ts:22:19
TS7006: Parameter 'file' implicitly has an 'any' type.
    20 |   uploadFiles: async (files: File[], patientId: string) => {
    21 |     const formData = new FormData();
  > 22 |     files.forEach(file => formData.append('files', file));
       |                   ^^^^
    23 |     formData.append('patientId', patientId);
    24 |     const { data } = await api.post('/dicom/upload', formData);
    25 |     return data;
ERROR in src/SettingsSection.tsx:92:17
TS2304: Cannot find name 'Object'.
    90 |             >
    91 |               {(
  > 92 |                 Object.entries(notifications) as [
       |                 ^^^^^^
    93 |                   keyof NotificationSettings,
    94 |                   boolean
    95 |                 ][]
ERROR in src/SettingsSection.tsx:96:17
TS2339: Property 'map' does not exist on type '{}'.
    94 |                   boolean
    95 |                 ][]
  > 96 |               ).map(([key, value]) => (
       |                 ^^^
    97 |                 <div
    98 |                   key={key}
    99 |                   style={{
ERROR in src/SettingsSection.tsx:96:23
TS7031: Binding element 'key' implicitly has an 'any' type.
    94 |                   boolean
    95 |                 ][]
  > 96 |               ).map(([key, value]) => (
       |                       ^^^
    97 |                 <div
    98 |                   key={key}
    99 |                   style={{
ERROR in src/SettingsSection.tsx:96:28
TS7031: Binding element 'value' implicitly has an 'any' type.
    94 |                   boolean
    95 |                 ][]
  > 96 |               ).map(([key, value]) => (
       |                            ^^^^^
    97 |                 <div
    98 |                   key={key}
    99 |                   style={{
ERROR in src/SignupForm.tsx:31:24
TS2697: An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option.
    29 |   };
    30 |
  > 31 |   const handleSubmit = async (e: React.FormEvent) => {
       |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    32 |     e.preventDefault();
    33 |     setError("");
    34 |
ERROR in src/SignupForm.tsx:35:24
TS2339: Property 'trim' does not exist on type 'string'.
    33 |     setError("");
    34 |
  > 35 |     if (!formData.name.trim()) {
       |                        ^^^^
    36 |       setError("Name is required");
    37 |       return;
    38 |     }
ERROR in src/SignupForm.tsx:40:25
TS2339: Property 'trim' does not exist on type 'string'.
    38 |     }
    39 |
  > 40 |     if (!formData.email.trim()) {
       |                         ^^^^
    41 |       setError("Email is required");
    42 |       return;
    43 |     }
ERROR in src/SignupForm.tsx:45:27
TS2339: Property 'length' does not exist on type 'string'.
    43 |     }
    44 |
  > 45 |     if (formData.password.length < 6) {
       |                           ^^^^^^
    46 |       setError("Password must be at least 6 characters");
    47 |       return;
    48 |     }
ERROR in src/SignupForm.tsx:61:17
TS2583: Cannot find name 'Promise'. Do you need to change your target library? Try changing the 'lib' compiler option to 'es2015' or later.
    59 |
    60 |     try {
  > 61 |       await new Promise((resolve) => setTimeout(resolve, 1000));
       |                 ^^^^^^^
    62 |       setSuccess(true);
    63 |       setTimeout(() => {
    64 |         onSuccess();
ERROR in src/SignupForm.tsx:61:26
TS7006: Parameter 'resolve' implicitly has an 'any' type.
    59 |
    60 |     try {
  > 61 |       await new Promise((resolve) => setTimeout(resolve, 1000));
       |                          ^^^^^^^
    62 |       setSuccess(true);
    63 |       setTimeout(() => {
    64 |         onSuccess();
ERROR in src/SocialSection.tsx:15:36
TS2339: Property 'map' does not exist on type '{}'.
    13 |         {/* Navigation Tabs */}
    14 |         <div className="flex">
  > 15 |           {["Feed", "Communities"].map((tab) => (
       |                                    ^^^
    16 |             <button
    17 |               key={tab}
    18 |               onClick={() => setActiveTab(tab as "Feed" | "Communities")}
ERROR in src/SocialSection.tsx:15:41
TS7006: Parameter 'tab' implicitly has an 'any' type.
    13 |         {/* Navigation Tabs */}
    14 |         <div className="flex">
  > 15 |           {["Feed", "Communities"].map((tab) => (
       |                                         ^^^
    16 |             <button
    17 |               key={tab}
    18 |               onClick={() => setActiveTab(tab as "Feed" | "Communities")}
ERROR in src/SocialSection.tsx:99:17
TS2339: Property 'map' does not exist on type '{}'.
     97 |                 "Manufacturing",
     98 |                 "Innovation",
  >  99 |               ].map((topic) => (
        |                 ^^^
    100 |                 <span
    101 |                   key={topic}
    102 |                   className="inline-block px-2 py-1 bg-[#1f2937] rounded text-sm text-gray-300"
ERROR in src/SocialSection.tsx:99:22
TS7006: Parameter 'topic' implicitly has an 'any' type.
     97 |                 "Manufacturing",
     98 |                 "Innovation",
  >  99 |               ].map((topic) => (
        |                      ^^^^^
    100 |                 <span
    101 |                   key={topic}
    102 |                   className="inline-block px-2 py-1 bg-[#1f2937] rounded text-sm text-gray-300"
ERROR in src/STLFilesSection.tsx:154:23
TS2304: Cannot find name 'Date'.
    152 |                 ...prev,
    153 |                 {
  > 154 |                   id: Date.now().toString(),
        |                       ^^^^
    155 |                   name: file.name,
    156 |                   uploadDate: new Date().toISOString().split("T")[0],
    157 |                   size: `${(file.size / (1024 * 1024)).toFixed(1)} MB`,
ERROR in src/STLFilesSection.tsx:156:35
TS2304: Cannot find name 'Date'.
    154 |                   id: Date.now().toString(),
    155 |                   name: file.name,
  > 156 |                   uploadDate: new Date().toISOString().split("T")[0],
        |                                   ^^^^
    157 |                   size: `${(file.size / (1024 * 1024)).toFixed(1)} MB`,
    158 |                   sharedWith: [],
    159 |                 },
ERROR in src/STLFilesSection.tsx:157:56
TS2339: Property 'toFixed' does not exist on type 'number'.
    155 |                   name: file.name,
    156 |                   uploadDate: new Date().toISOString().split("T")[0],
  > 157 |                   size: `${(file.size / (1024 * 1024)).toFixed(1)} MB`,
        |                                                        ^^^^^^^
    158 |                   sharedWith: [],
    159 |                 },
    160 |               ]);
ERROR in src/STLFilesSection.tsx:167:16
TS2339: Property 'map' does not exist on type '{}'.
    165 |
    166 |       <div style={styles.fileGrid}>
  > 167 |         {files.map((file) => (
        |                ^^^
    168 |           <div key={file.id} style={styles.fileCard}>
    169 |             <div style={styles.fileInfo}>
    170 |               <FolderOpen size={24} color="#6366f1" />
ERROR in src/STLFilesSection.tsx:167:21
TS7006: Parameter 'file' implicitly has an 'any' type.
    165 |
    166 |       <div style={styles.fileGrid}>
  > 167 |         {files.map((file) => (
        |                     ^^^^
    168 |           <div key={file.id} style={styles.fileCard}>
    169 |             <div style={styles.fileInfo}>
    170 |               <FolderOpen size={24} color="#6366f1" />
ERROR in src/STLFilesSection.tsx:201:43
TS2339: Property 'filter' does not exist on type '{}'.
    199 |                 style={styles.deleteButton}
    200 |                 onClick={() => {
  > 201 |                   setFiles((prev) => prev.filter((f) => f.id !== file.id));
        |                                           ^^^^^^
    202 |                 }}
    203 |               >
    204 |                 <Trash2 size={16} />
ERROR in src/STLFilesSection.tsx:201:51
TS7006: Parameter 'f' implicitly has an 'any' type.
    199 |                 style={styles.deleteButton}
    200 |                 onClick={() => {
  > 201 |                   setFiles((prev) => prev.filter((f) => f.id !== file.id));
        |                                                   ^
    202 |                 }}
    203 |               >
    204 |                 <Trash2 size={16} />
ERROR in src/STLFilesSection.tsx:211:14
TS2339: Property 'length' does not exist on type '{}'.
    209 |       </div>
    210 |
  > 211 |       {files.length === 0 && (
        |              ^^^^^^
    212 |         <div style={styles.emptyState}>
    213 |           <Upload size={48} style={styles.emptyStateIcon} />
    214 |           <p>No STL files uploaded yet</p>
ERROR in src/TeamsSection.tsx:78:11
TS2304: Cannot find name 'Date'.
    76 |
    77 |     const newTeam: Team = {
  > 78 |       id: Date.now().toString(),
       |           ^^^^
    79 |       name: newTeamName,
    80 |       members: ["Current User"],
    81 |       joinCode: Math.random().toString(36).substring(2, 8).toUpperCase(),
ERROR in src/TeamsSection.tsx:81:17
TS2304: Cannot find name 'Math'.
    79 |       name: newTeamName,
    80 |       members: ["Current User"],
  > 81 |       joinCode: Math.random().toString(36).substring(2, 8).toUpperCase(),
       |                 ^^^^
    82 |       rootFolder: {
    83 |         id: "root",
    84 |         name: "Root",
ERROR in src/TeamsSection.tsx:97:24
TS2339: Property 'find' does not exist on type '{}'.
     95 |
     96 |   const handleJoinTeam = () => {
  >  97 |     const team = teams.find((t) => t.joinCode === joinCode);
        |                        ^^^^
     98 |     if (team) {
     99 |       setTeams(
    100 |         teams.map((t) =>
ERROR in src/TeamsSection.tsx:97:30
TS7006: Parameter 't' implicitly has an 'any' type.
     95 |
     96 |   const handleJoinTeam = () => {
  >  97 |     const team = teams.find((t) => t.joinCode === joinCode);
        |                              ^
     98 |     if (team) {
     99 |       setTeams(
    100 |         teams.map((t) =>
ERROR in src/TeamsSection.tsx:100:15
TS2339: Property 'map' does not exist on type '{}'.
     98 |     if (team) {
     99 |       setTeams(
  > 100 |         teams.map((t) =>
        |               ^^^
    101 |           t.id === team.id
    102 |             ? { ...t, members: [...t.members, "Current User"] }
    103 |             : t
ERROR in src/TeamsSection.tsx:100:20
TS7006: Parameter 't' implicitly has an 'any' type.
     98 |     if (team) {
     99 |       setTeams(
  > 100 |         teams.map((t) =>
        |                    ^
    101 |           t.id === team.id
    102 |             ? { ...t, members: [...t.members, "Current User"] }
    103 |             : t
ERROR in src/TeamsSection.tsx:116:13
TS2339: Property 'map' does not exist on type '{}'.
    114 |
    115 |     setTeams(
  > 116 |       teams.map((team) => {
        |             ^^^
    117 |         if (team.id !== teamId) return team;
    118 |
    119 |         const newFolder: TeamFolder = {
ERROR in src/TeamsSection.tsx:116:18
TS7006: Parameter 'team' implicitly has an 'any' type.
    114 |
    115 |     setTeams(
  > 116 |       teams.map((team) => {
        |                  ^^^^
    117 |         if (team.id !== teamId) return team;
    118 |
    119 |         const newFolder: TeamFolder = {
ERROR in src/TeamsSection.tsx:120:15
TS2304: Cannot find name 'Date'.
    118 |
    119 |         const newFolder: TeamFolder = {
  > 120 |           id: Date.now().toString(),
        |               ^^^^
    121 |           name: folderName,
    122 |           files: [],
    123 |           subfolders: [],
ERROR in src/TeamsSection.tsx:140:43
TS2339: Property 'map' does not exist on type '{}'.
    138 |           return {
    139 |             ...folder,
  > 140 |             subfolders: folder.subfolders.map((sf) =>
        |                                           ^^^
    141 |               addFolderToPath(sf, targetPath)
    142 |             ),
    143 |           };
ERROR in src/TeamsSection.tsx:140:48
TS7006: Parameter 'sf' implicitly has an 'any' type.
    138 |           return {
    139 |             ...folder,
  > 140 |             subfolders: folder.subfolders.map((sf) =>
        |                                                ^^
    141 |               addFolderToPath(sf, targetPath)
    142 |             ),
    143 |           };
ERROR in src/TeamsSection.tsx:163:36
TS2304: Cannot find name 'Array'.
    161 |       if (!files) return;
    162 |
  > 163 |       const newFiles: TeamFile[] = Array.from(files).map((file) => ({
        |                                    ^^^^^
    164 |         id: Date.now().toString(),
    165 |         name: file.name,
    166 |         type: file.type || "unknown",
ERROR in src/TeamsSection.tsx:163:59
TS7006: Parameter 'file' implicitly has an 'any' type.
    161 |       if (!files) return;
    162 |
  > 163 |       const newFiles: TeamFile[] = Array.from(files).map((file) => ({
        |                                                           ^^^^
    164 |         id: Date.now().toString(),
    165 |         name: file.name,
    166 |         type: file.type || "unknown",
ERROR in src/TeamsSection.tsx:164:13
TS2304: Cannot find name 'Date'.
    162 |
    163 |       const newFiles: TeamFile[] = Array.from(files).map((file) => ({
  > 164 |         id: Date.now().toString(),
        |             ^^^^
    165 |         name: file.name,
    166 |         type: file.type || "unknown",
    167 |         size: `${(file.size / 1024).toFixed(1)} KB`,
ERROR in src/TeamsSection.tsx:167:37
TS2339: Property 'toFixed' does not exist on type 'number'.
    165 |         name: file.name,
    166 |         type: file.type || "unknown",
  > 167 |         size: `${(file.size / 1024).toFixed(1)} KB`,
        |                                     ^^^^^^^
    168 |         uploadedBy: "Current User",
    169 |         timestamp: new Date().toISOString(),
    170 |         path: `${folderPath}/${file.name}`,
ERROR in src/TeamsSection.tsx:169:24
TS2304: Cannot find name 'Date'.
    167 |         size: `${(file.size / 1024).toFixed(1)} KB`,
    168 |         uploadedBy: "Current User",
  > 169 |         timestamp: new Date().toISOString(),
        |                        ^^^^
    170 |         path: `${folderPath}/${file.name}`,
    171 |       }));
    172 |
ERROR in src/TeamsSection.tsx:174:15
TS2339: Property 'map' does not exist on type '{}'.
    172 |
    173 |       setTeams(
  > 174 |         teams.map((team) => {
        |               ^^^
    175 |           if (team.id !== teamId) return team;
    176 |
    177 |           const addFilesToPath = (
ERROR in src/TeamsSection.tsx:174:20
TS7006: Parameter 'team' implicitly has an 'any' type.
    172 |
    173 |       setTeams(
  > 174 |         teams.map((team) => {
        |                    ^^^^
    175 |           if (team.id !== teamId) return team;
    176 |
    177 |           const addFilesToPath = (
ERROR in src/TeamsSection.tsx:190:45
TS2339: Property 'map' does not exist on type '{}'.
    188 |             return {
    189 |               ...folder,
  > 190 |               subfolders: folder.subfolders.map((sf) =>
        |                                             ^^^
    191 |                 addFilesToPath(sf, targetPath)
    192 |               ),
    193 |             };
ERROR in src/TeamsSection.tsx:190:50
TS7006: Parameter 'sf' implicitly has an 'any' type.
    188 |             return {
    189 |               ...folder,
  > 190 |               subfolders: folder.subfolders.map((sf) =>
        |                                                  ^^
    191 |                 addFilesToPath(sf, targetPath)
    192 |               ),
    193 |             };
ERROR in src/TeamsSection.tsx:212:40
TS2339: Property 'includes' does not exist on type '{}'.
    210 |
    211 |   const renderFolder = (folder: TeamFolder, teamId: string, level = 0) => {
  > 212 |     const isExpanded = expandedFolders.includes(folder.path);
        |                                        ^^^^^^^^
    213 |
    214 |     return (
    215 |       <div key={folder.id} className="space-y-2">
ERROR in src/TeamsSection.tsx:224:26
TS2339: Property 'filter' does not exist on type '{}'.
    222 |               setExpandedFolders((prev) =>
    223 |                 isExpanded
  > 224 |                   ? prev.filter((p) => p !== folder.path)
        |                          ^^^^^^
    225 |                   : [...prev, folder.path]
    226 |               )
    227 |             }
ERROR in src/TeamsSection.tsx:224:34
TS7006: Parameter 'p' implicitly has an 'any' type.
    222 |               setExpandedFolders((prev) =>
    223 |                 isExpanded
  > 224 |                   ? prev.filter((p) => p !== folder.path)
        |                                  ^
    225 |                   : [...prev, folder.path]
    226 |               )
    227 |             }
ERROR in src/TeamsSection.tsx:262:16
TS2339: Property 'sort' does not exist on type '{}'.
    260 |           <div className="space-y-2">
    261 |             {folder.files
  > 262 |               .sort((a, b) => {
        |                ^^^^
    263 |                 if (a.type !== b.type) return a.type.localeCompare(b.type);
    264 |                 return (
    265 |                   new Date(b.timestamp).getTime() -
ERROR in src/TeamsSection.tsx:262:22
TS7006: Parameter 'a' implicitly has an 'any' type.
    260 |           <div className="space-y-2">
    261 |             {folder.files
  > 262 |               .sort((a, b) => {
        |                      ^
    263 |                 if (a.type !== b.type) return a.type.localeCompare(b.type);
    264 |                 return (
    265 |                   new Date(b.timestamp).getTime() -
ERROR in src/TeamsSection.tsx:262:25
TS7006: Parameter 'b' implicitly has an 'any' type.
    260 |           <div className="space-y-2">
    261 |             {folder.files
  > 262 |               .sort((a, b) => {
        |                         ^
    263 |                 if (a.type !== b.type) return a.type.localeCompare(b.type);
    264 |                 return (
    265 |                   new Date(b.timestamp).getTime() -
ERROR in src/TeamsSection.tsx:265:23
TS2304: Cannot find name 'Date'.
    263 |                 if (a.type !== b.type) return a.type.localeCompare(b.type);
    264 |                 return (
  > 265 |                   new Date(b.timestamp).getTime() -
        |                       ^^^^
    266 |                   new Date(a.timestamp).getTime()
    267 |                 );
    268 |               })
ERROR in src/TeamsSection.tsx:266:23
TS2304: Cannot find name 'Date'.
    264 |                 return (
    265 |                   new Date(b.timestamp).getTime() -
  > 266 |                   new Date(a.timestamp).getTime()
        |                       ^^^^
    267 |                 );
    268 |               })
    269 |               .map((file) => (
ERROR in src/TeamsSection.tsx:269:21
TS7006: Parameter 'file' implicitly has an 'any' type.
    267 |                 );
    268 |               })
  > 269 |               .map((file) => (
        |                     ^^^^
    270 |                 <div
    271 |                   key={file.id}
    272 |                   className="flex items-center gap-2 hover:bg-gray-700 p-2 rounded"
ERROR in src/TeamsSection.tsx:278:26
TS2304: Cannot find name 'Date'.
    276 |                   <span>{file.name}</span>
    277 |                   <span className="text-sm text-gray-400 ml-2">
  > 278 |                     {new Date(file.timestamp).toLocaleString()}
        |                          ^^^^
    279 |                   </span>
    280 |                   <span className="text-sm text-gray-400 ml-2">
    281 |                     {file.size}
ERROR in src/TeamsSection.tsx:285:32
TS2339: Property 'map' does not exist on type '{}'.
    283 |                 </div>
    284 |               ))}
  > 285 |             {folder.subfolders.map((subfolder) =>
        |                                ^^^
    286 |               renderFolder(subfolder, teamId, level + 1)
    287 |             )}
    288 |           </div>
ERROR in src/TeamsSection.tsx:285:37
TS7006: Parameter 'subfolder' implicitly has an 'any' type.
    283 |                 </div>
    284 |               ))}
  > 285 |             {folder.subfolders.map((subfolder) =>
        |                                     ^^^^^^^^^
    286 |               renderFolder(subfolder, teamId, level + 1)
    287 |             )}
    288 |           </div>
ERROR in src/TeamsSection.tsx:315:16
TS2339: Property 'map' does not exist on type '{}'.
    313 |
    314 |       <div className="grid grid-cols-1 gap-4">
  > 315 |         {teams.map((team) => (
        |                ^^^
    316 |           <div key={team.id} className="bg-gray-800 rounded-lg p-4">
    317 |             <div className="flex justify-between items-center mb-4">
    318 |               <h3 className="text-xl font-semibold">{team.name}</h3>
ERROR in src/TeamsSection.tsx:315:21
TS7006: Parameter 'team' implicitly has an 'any' type.
    313 |
    314 |       <div className="grid grid-cols-1 gap-4">
  > 315 |         {teams.map((team) => (
        |                     ^^^^
    316 |           <div key={team.id} className="bg-gray-800 rounded-lg p-4">
    317 |             <div className="flex justify-between items-center mb-4">
    318 |               <h3 className="text-xl font-semibold">{team.name}</h3>